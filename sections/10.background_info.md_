# Background information

Single page applications (SPAs) are a website architecture which which provides native-like speed and fluidity that traditional architecture cannot provide [@scott_2016].

Traditional architectures treat each page of a site as a separate resource with its own end-point, its own template and its own request. When a user navigates to a different page, the will send a request to the server, the page will get constructed in full, complete with styles and content before getting sent to the users' machine to render.

This pattern is very simple, however, does have some disadvantages: on slower networks, the user is forced to wait after many interactions even when the upcoming page is very similar. Every request will see them reload many resources which they have previously seen.

SPAs solve this issue by constructing the page on the users device. When a user initially navigates to a page they download a javascript bundle which has the ability to construct any page of the website. Then, javascript reads the url current url, and then renders the appropriate views. When navigating to another page, the javascript intercepts the request and instead just renders the new content based upon this new url - without the need for a network request.

> :note This is a simplified example of how SPAs tend to work. In reality having a user download the entire code bundle is not the most ideal. Therefore, optimizations are performed such as code splitting where the user only downloads the necessary code to build the requested page. Then upon navigating, the code can check if exactly what pieces are missing and request them specifically.

SPAs bring rise to a new problem however, requesting the dynamic data displayed on the site. such as blog posts, latest news, name of the current user etc. Traditionally when the page was constructed on the server, the server could query the database as many times as needed to collate this information before populating the page. SPAs, however, cannot simply query a database and so they lead rise to a new website sub-system: the API.

> :note they remove the need for a server which transforms requests to html in favour of one which

## Website Architecture

Websites are comprised of many subsystems which work in tandem to deliver the final user experience. The number of different subsystem that could exist in the realm of all possible websites is extremely large, for the purposes of this project we shall be focusing on the following parts:

### Database

A database is a service designed to store, retrieve and manipulate large amounts of persistent data. Any website that presents more then simply static pages to the end user is nearly guaranteed to to utilize a database.

### View

The view of the website is what the user sees and interacts with. The view ultimately is HTML which is rendered in the browser but the way the HTML is realised is done in a number of different manners.

### API

An API provides an interface between view layer and the database.

### Authentication systems

An authentication systems acts to confirm a users identity between stateless http requests. They are ultimately responsible for ensuring requests made can be trusted.

### File Hosting

: services which manages the storage and retrieval of large form data such as images. This service could simply store files on the host server, but more commonly these files are sent to a third party CDN (content delivery network) such as Amazon Web Serives. This is done in the interest of speed, reliabilty and expandibility.
